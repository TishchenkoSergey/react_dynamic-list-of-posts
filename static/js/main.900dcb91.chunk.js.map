{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/CommentsList/CommentsList.jsx","components/PostDetails/PostDetails.jsx","api/users.js","App.jsx","index.js"],"names":["request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getUserPosts","userId","a","posts","filter","post","getPostDetails","postId","postDetails","PostsList","selectedUserId","choosePost","selectedPostId","useState","setPosts","useEffect","postsFromServer","inner","className","map","key","id","title","type","onClick","getPostComments","comments","comment","body","postComment","name","email","method","headers","JSON","stringify","deleteComment","commentId","NewCommentForm","updateComments","setName","setEmail","setBody","onSubmit","event","preventDefault","includes","placeholder","value","onChange","target","CommentsList","PostDetails","setPostDetails","setComments","isCommentsShown","toggleCommentsVisibility","loadPostDetails","postDetailsFromServer","commentsFromserver","length","getUsers","users","App","setUsers","setSelectedUserId","setSelectedPostId","usersFromServer","slice","user","index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.900dcb91.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const post = (url, data) => request(url, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n\nexport const remove = url => request(url, {\n  method: 'DELETE',\n});\n","import { request } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request('/posts');\n\n  return (\n    userId\n      ? posts.filter(post => post.userId === userId)\n      : posts\n  );\n};\n\nexport const getPostDetails = async(postId) => {\n  const postDetails = await request(`/posts/${postId}`);\n\n  return postDetails;\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\nexport const PostsList = ({ selectedUserId, choosePost, selectedPostId }) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    async function inner() {\n      const postsFromServer = await getUserPosts();\n\n      setPosts(postsFromServer);\n    }\n\n    inner();\n  }, []);\n\n  useEffect(() => {\n    async function inner() {\n      const postsFromServer = await getUserPosts(selectedUserId);\n\n      setPosts(postsFromServer);\n    }\n\n    inner();\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul>\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                {`[User #${post.userId}]:`}\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => choosePost(post.id)}\n            >\n              {selectedPostId === post.id\n                ? 'Close'\n                : 'Open'\n              }\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  choosePost: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import { post, remove, request } from './api';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request('/comments');\n\n  return comments.filter(comment => comment.postId === postId && comment.body);\n};\n\nexport const postComment = async(\n  postId,\n  name,\n  email,\n  body,\n) => post('/comments', {\n  postId,\n  name,\n  email,\n  body,\n});\n\nexport const deleteComment = commentId => remove(`/comments/${commentId}`);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { postComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, updateComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (!name || !email.includes('@') || !body) {\n      return;\n    }\n\n    postComment(postId, name, email, body)\n      .then(() => updateComments());\n    setBody('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { deleteComment } from '../../api/comments';\n\nexport const CommentsList = ({ comments, updateComments }) => {\n  const handleDelete = (commentId) => {\n    deleteComment(commentId)\n      .then(() => updateComments());\n  };\n\n  return (\n    <ul className=\"PostDetails__list\">\n      {comments.map(comment => (\n        <li className=\"PostDetails__list-item\" key={comment.id}>\n          <button\n            type=\"button\"\n            className=\"PostDetails__remove-button button\"\n            onClick={() => handleDelete(comment.id)}\n          >\n            X\n          </button>\n          <p>\n            {comment.body}\n          </p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nCommentsList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      body: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport { CommentsList } from '../CommentsList/CommentsList';\nimport { getPostComments } from '../../api/comments';\n\nexport const PostDetails = ({ postId }) => {\n  const [postDetails, setPostDetails] = useState({});\n  const [comments, setComments] = useState([]);\n  const [isCommentsShown, toggleCommentsVisibility] = useState(false);\n\n  useEffect(() => {\n    loadPostDetails();\n    updateComments();\n  }, [postId]);\n\n  const loadPostDetails = async() => {\n    const postDetailsFromServer = await getPostDetails(postId);\n\n    setPostDetails(postDetailsFromServer);\n  };\n\n  const updateComments = async() => {\n    const commentsFromserver = await getPostComments(postId);\n\n    setComments(commentsFromserver);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {postDetails.body}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => toggleCommentsVisibility(!isCommentsShown)}\n        >\n          {`${isCommentsShown ? 'Hide' : 'Show'} ${comments.length} comments`}\n        </button>\n\n        {isCommentsShown && (\n          <CommentsList comments={comments} updateComments={updateComments} />\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postId={postId} updateComments={updateComments} />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import { request } from './api';\n\nexport const getUsers = async(userId) => {\n  const users = await request('/users');\n\n  return users;\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    async function inner() {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer.slice(0, 10));\n    }\n\n    inner();\n  }, []);\n\n  const handleUserSelect = (event) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  const choosePost = (postId) => {\n    if (postId === selectedPostId) {\n      setSelectedPostId(0);\n\n      return;\n    }\n\n    setSelectedPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={handleUserSelect}\n          >\n            <option value=\"0\">All users</option>\n            {users.map((user, index) => (\n              <option value={index + 1} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            choosePost={choosePost}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId === 0\n            ? <h4>Choose post first to see details</h4>\n            : <PostDetails postId={selectedPostId} />\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}