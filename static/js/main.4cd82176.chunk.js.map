{"version":3,"sources":["api/api.js","api/posts.js","components/Loader/Loader.jsx","components/Post/Post.jsx","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/Comment/Comment.jsx","components/CommentsList/CommentsList.jsx","components/PostDetails/PostDetails.jsx","api/users.js","components/UserSelect/UserSelect.jsx","App.jsx","index.js"],"names":["request","url","options","a","fetch","response","ok","Error","status","statusText","json","result","data","getUserPosts","userId","posts","filter","post","getPostDetails","postId","postDetails","Loader","className","Post","choosePost","selectedPostId","key","id","title","type","onClick","PostsList","selectedUserId","useState","setPosts","isLoading","toggleLoading","useEffect","loadUsers","postsFromServer","map","getPostComments","comments","comment","body","postComment","name","email","method","headers","JSON","stringify","deleteComment","commentId","NewCommentForm","updateComments","setName","setEmail","setBody","onSubmit","event","preventDefault","includes","then","placeholder","value","onChange","target","Comment","handleDelete","CommentsList","PostDetails","setPostDetails","setComments","isCommentsShown","toggleCommentsVisibility","loadPostDetails","postDetailsFromServer","commentsFromserver","length","classNames","button","getUsers","users","UserSelect","handleUserSelect","setUsers","usersFromServer","slice","user","index","App","setSelectedUserId","setSelectedPostId","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4cd82176.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = async(url, options) => {\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  const result = await response.json();\n\n  return result.data;\n};\n\nexport const post = (url, data) => request(\n  url,\n  {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  },\n);\n\nexport const remove = url => request(\n  url,\n  {\n    method: 'DELETE',\n  },\n);\n","import { request } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request('/posts');\n\n  return (\n    userId\n      ? posts.filter(post => post.userId === userId)\n      : posts\n  );\n};\n\nexport const getPostDetails = async(postId) => {\n  const postDetails = await request(`/posts/${postId}`);\n\n  return postDetails;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Post = ({ post, choosePost, selectedPostId }) => (\n  <li className=\"PostsList__item\" key={post.id}>\n    <div>\n      <b>\n        {`[User #${post.userId}]:`}\n      </b>\n      {post.title}\n    </div>\n    <button\n      type=\"button\"\n      className=\"PostsList__button button\"\n      onClick={() => choosePost(post.id)}\n    >\n      {selectedPostId === post.id\n        ? 'Close'\n        : 'Open'\n      }\n    </button>\n  </li>\n);\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    userId: PropTypes.number.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  choosePost: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\nimport { Post } from '../Post/Post';\n\nexport const PostsList = ({ selectedUserId, choosePost, selectedPostId }) => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, toggleLoading] = useState(true);\n\n  useEffect(() => {\n    loadUsers();\n  }, [selectedUserId]);\n\n  const loadUsers = async() => {\n    const postsFromServer = await getUserPosts(selectedUserId);\n\n    setPosts(postsFromServer);\n    toggleLoading(false);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {isLoading\n        ? <Loader />\n        : (\n          <ul>\n            {posts.map(post => (\n              <Post\n                post={post}\n                choosePost={choosePost}\n                selectedPostId={selectedPostId}\n              />\n            ))}\n          </ul>\n        )}\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  choosePost: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import { post, remove, request } from './api';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request('/comments');\n\n  return comments.filter(comment => comment.postId === postId && comment.body);\n};\n\nexport const postComment = async(\n  postId,\n  name,\n  email,\n  body,\n) => post('/comments', {\n  postId,\n  name,\n  email,\n  body,\n});\n\nexport const deleteComment = commentId => remove(`/comments/${commentId}`);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { postComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, updateComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (!name || !email.includes('@') || !body) {\n      return;\n    }\n\n    postComment(postId, name, email, body)\n      .then(() => updateComments());\n    setBody('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Comment = ({ comment, handleDelete }) => (\n  <li className=\"PostDetails__list-item\" key={comment.id}>\n    <button\n      type=\"button\"\n      className=\"PostDetails__remove-button button\"\n      onClick={() => handleDelete(comment.id)}\n    >\n      X\n    </button>\n    <p>\n      {comment.body}\n    </p>\n  </li>\n);\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    body: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { deleteComment } from '../../api/comments';\nimport { Comment } from '../Comment/Comment';\n\nexport const CommentsList = ({ comments, updateComments }) => {\n  const handleDelete = (commentId) => {\n    deleteComment(commentId)\n      .then(updateComments);\n  };\n\n  return (\n    <ul className=\"PostDetails__list\">\n      {comments.map(comment => (\n        <Comment\n          comment={comment}\n          handleDelete={handleDelete}\n        />\n      ))}\n    </ul>\n  );\n};\n\nCommentsList.propTypes = {\n  comments: PropTypes.arrayOf().isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport { CommentsList } from '../CommentsList/CommentsList';\nimport { getPostComments } from '../../api/comments';\n\nexport const PostDetails = ({ postId }) => {\n  const [postDetails, setPostDetails] = useState({});\n  const [comments, setComments] = useState([]);\n  const [isCommentsShown, toggleCommentsVisibility] = useState(false);\n\n  useEffect(() => {\n    loadPostDetails();\n    updateComments();\n  }, [postId]);\n\n  const loadPostDetails = async() => {\n    const postDetailsFromServer = await getPostDetails(postId);\n\n    setPostDetails(postDetailsFromServer);\n  };\n\n  const updateComments = async() => {\n    const commentsFromserver = await getPostComments(postId);\n\n    setComments(commentsFromserver);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {postDetails.body}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length\n          ? (\n            <button\n              type=\"button\"\n              className={classNames({\n                button: true,\n                'PostDetails__remove-button': isCommentsShown,\n              })}\n              onClick={() => toggleCommentsVisibility(!isCommentsShown)}\n            >\n              {`${isCommentsShown\n                ? 'Hide'\n                : 'Show'} ${comments.length} comments`}\n            </button>\n          )\n          : (<p>No comments here yet</p>)\n        }\n\n        {isCommentsShown && (\n          <CommentsList comments={comments} updateComments={updateComments} />\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postId={postId} updateComments={updateComments} />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import { request } from './api';\n\nexport const getUsers = async(userId) => {\n  const users = await request('/users');\n\n  return users;\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUsers } from '../../api/users';\n\nexport const UserSelect = ({ selectedUserId, handleUserSelect }) => {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const loadUsers = async() => {\n    const usersFromServer = await getUsers();\n\n    setUsers(usersFromServer.slice(0, 10));\n  };\n\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        className=\"App__user-selector\"\n        value={selectedUserId}\n        onChange={handleUserSelect}\n      >\n        <option value=\"0\">All users</option>\n        {users.map((user, index) => (\n          <option value={index + 1} key={user.id}>\n            {user.name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n};\n\nUserSelect.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  handleUserSelect: PropTypes.func.isRequired,\n};\n","import React, { useCallback, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect/UserSelect';\n\nconst App = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const handleUserSelect = useCallback((event) => {\n    setSelectedUserId(+event.target.value);\n  }, []);\n\n  const choosePost = useCallback((postId) => {\n    if (postId === selectedPostId) {\n      setSelectedPostId(0);\n\n      return;\n    }\n\n    setSelectedPostId(postId);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          handleUserSelect={handleUserSelect}\n          selectedUserId={selectedUserId}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            choosePost={choosePost}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId === 0\n            ? <h4>Choose post first, to see details</h4>\n            : <PostDetails postId={selectedPostId} />\n          }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}